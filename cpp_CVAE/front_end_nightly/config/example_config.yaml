#example_config.yaml

# ---------------------------------------------------------
# YAML → config.h Generator Guide (used by generate_config_hpp.py)
# ---------------------------------------------------------
#
#  Key Format:
#   - Keys use snake_case; nesting defines hierarchy.
#   - Becomes C++: CapitalCamelCase__snake_case
#     e.g. training.optimizer.beta1 → Training_Optimizer__beta1
#
#  Value Rules:
#   - Scalars → constexpr (int, float, bool, str).
#   - Lists of layers → use `construct: architecture` + `layers: [...]`.
#   - Typed objects → use `construct: object` + `type:` + args.
#   - To flatten nested fields instead: use `construct: false`.
#
#  Placeholder Support:
#   - Strings like "{data.input_features}" will be interpolated.
#   - External values can be passed via `external_context` in Python and will overwrite if the key already exists
#
#  Output:
#   - All config is emitted under `namespace config { ... }` in C++.
#   - Layer arrays: constexpr std::array<std::shared_ptr<Layer<Scalar>>>.
#   - Objects: constexpr <Type<Scalar>> = Type<Scalar>(args...);
#
#  Maintained via supported_types.py:
#   - Lists supported optimizers, layer types, initializers, etc.
#

global:
  build_dir: /home/grant/research/czi/Personal_VAE_SingleCellRNASeq/cpp_CVAE/Builds/MVP_build/
  CMakeLists_home_dir: /home/grant/research/czi/Personal_VAE_SingleCellRNASeq/cpp_CVAE/
  seed: 0
  using_metadata: false #Flag probably wont really be used in the future, but could be useful for debug + pre conditional-layer-implementation
  scalar: !!float 0.0
model:
  basic_auto_encoder:
    construct: architecture #Each line should be a layer, with arguements matching the corresponding Layer constructor. 
    layers:
      - Linear: ["{data.num_features}", 512, glorot] 
      - RELU: []
      - Linear: [512, 128, glorot]
      - RELU: []
      - Linear: [128, 512, glorot]
      - RELU: []
      - Linear: [ 512, "{data.num_features}", glorot]
    latent_dim: 128

training:
  epochs: 1
  batch_size: 128
  lr: 0.001
  output_dir: /mnt/projects/debruinz_project/grant_gordon/Personal_VAE_SingleCellRNASeq/cpp_CVAE/JobOutputs
  
  optimizer:
    construct: object
    type: Adam
    beta1: 1
    beta2: 2
    epsilon: 3

data:
  data_dir: /mnt/projects/debruinz_project/july2024_census_data/subset
  counts_file_pattern: "{data.species}_counts_*.npz"
  metadata_file_pattern: "{data.species}_metadata_*.pkl"
  vocab_builder_out: /mnt/projects/debruinz_project/grant_gordon/Personal_VAE_SingleCellRNASeq/cpp_CVAE/preprocessed_data/
  species: human
  chunks_to_preload: 0
  batches_to_preload: 0
  num_features: 999 #TODO: figure out if this can be constexpr
  
conditional_heads:
  metadata_vocab: /mnt/projects/debruinz_project/grant_gordon/Personal_VAE_SingleCellRNASeq/cpp_CVAE/preprocessed_data/human_vocab_dict.pkl

  metadata_fields:
    assay:
      type: onehot
    assay_ontology_term_id:
      type: IGNORE
    cell_type:
      type: embedding
      embedding_dim: 128
    cell_type_ontology_term_id:
      type: IGNORE
    dataset_id:
      type: embedding
      embedding_dim: 128
    dev_stage:
      type: onehot
    development_stage:
      type: embedding
      embedding_dim: 128
    development_stage_ontology_term_id:
      type: IGNORE
    disease:
      type: embedding
      embedding_dim: 128
    disease_ontology_term_id:
      type: IGNORE
    donor_id:
      type: embedding
      embedding_dim: 128
    is_primary_data:
      type: IGNORE
    n_measured_vars:
      type: IGNORE
    nnz:
      type: IGNORE
    observation_joinid:
      type: IGNORE
    raw_mean_nnz:
      type: IGNORE
    raw_sum:
      type: IGNORE
    raw_variance_nnz:
      type: IGNORE
    self_reported_ethnicity:
      type: embedding
      embedding_dim: 128
    self_reported_ethnicity_ontology_term_id:
      type: IGNORE
    sex:
      type: onehot
    sex_ontology_term_id:
      type: IGNORE
    soma_joinid:
      type: IGNORE
    suspension_type:
      type: onehot
    tissue:
      type: embedding
      embedding_dim: 128
    tissue_general:
      type: embedding
      embedding_dim: 128
    tissue_general_ontology_term_id:
      type: IGNORE
    tissue_ontology_term_id:
      type: IGNORE
    tissue_type:
      type: IGNORE

random_test_architecture:
  dummy_cvae:
    dummy_value: 5
    model:
      construct: architecture #Each line should be a layer, with arguements matching the corresponding Layer constructor. 
      layers:
        - Linear: ["{data.num_features}", 888, glorot] 
        - RELU: []
        - Linear: [888, 888, glorot]
        - RELU: []
        - Linear: [888, 888, glorot]
        - RELU: []
        - Linear: [ 888, "{data.num_features}", glorot]
      latent_dim: 777