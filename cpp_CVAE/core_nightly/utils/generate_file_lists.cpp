#pragma once
#include <filesystem>
#include <regex>
#include <vector>
#include <string>

//AI Acknowledgement - This method was fully generated by chatGPT
//TODO: no clue how this function works, operating on blind faith atm

namespace fs = std::filesystem;

std::vector<std::string> get_matching_files(const std::string& dir, const std::string& pattern) {
    std::vector<std::string> matched_files;

    // Convert glob-like pattern to a regex (very basic: * -> .*)
    std::string regex_str = std::regex_replace(pattern, std::regex(R"(\.)"), R"(\.)");
    regex_str = std::regex_replace(regex_str, std::regex(R"(\*)"), ".*");
    std::regex re(regex_str);

    for (const auto& entry : fs::directory_iterator(dir)) {
        if (!entry.is_regular_file()) continue;

        const auto& path = entry.path();
        const std::string filename = path.filename().string();

        if (std::regex_match(filename, re)) {
            matched_files.push_back(path.string());
        }
    }

    return matched_files;
}
